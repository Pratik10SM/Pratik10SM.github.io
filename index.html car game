<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Mobile Car Racing Game</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      background: #222;
      touch-action: none;
      -webkit-user-select: none;
      user-select: none;
    }
    #gameCanvas {
      background: #333;
      display: block;
      margin: 0 auto;
      touch-action: none;
    }
    #levelInfo {
      position: absolute;
      top: 8px; left: 0; right: 0;
      text-align: center;
      color: #fff;
      font-size: 20px;
      z-index: 10;
      text-shadow: 1px 1px 6px #000;
      font-weight: bold;
    }
    #startScreen, #levelComplete {
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.80);
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      font-size: 2em;
      z-index: 20;
    }
    #startBtn, #nextBtn {
      font-size: 1.2em;
      padding: 16px 36px;
      margin-top: 1em;
      border-radius: 8px;
      border: none;
      background: linear-gradient(90deg,#4caf50,#2196f3);
      color: #fff;
      font-weight: bold;
      cursor: pointer;
    }
    /* Invisible controls for debug (make visible if needed) */
    .control-area {
      position: absolute;
      top: 0; bottom: 0;
      width: 50vw;
      z-index: 100;
    }
    #leftControl { left: 0; }
    #rightControl { right: 0; }
  </style>
</head>
<body>
  <div id="levelInfo"></div>
  <canvas id="gameCanvas" width="420" height="750"></canvas>
  <div id="startScreen">
    <div>Mobile Car Racing Game</div>
    <div style="font-size:0.6em;margin:1em 0 0.2em;">Tilt to steer. Tap right for gas, left for brake.</div>
    <button id="startBtn">Start Game</button>
  </div>
  <div id="levelComplete" style="display:none;">
    <div id="levelMsg"></div>
    <button id="nextBtn">Next Level</button>
  </div>
  <!-- Invisible control areas for accelerator/brake -->
  <div id="leftControl" class="control-area"></div>
  <div id="rightControl" class="control-area"></div>
  <script>
    // Settings
    const NUM_CARS = 4;
    const LEVELS = 10;
    const TRACK_WIDTH = 300;
    const CAR_WIDTH = 36, CAR_HEIGHT = 60;
    const TRACK_MARGIN = 60;
    const OBSTACLE_WIDTH = 38, OBSTACLE_HEIGHT = 38;
    const PLAYER_COLORS = ["#FFD600","#03A9F4","#E91E63","#00E676"];
    const AI_NAMES = ["AI-Red","AI-Blue","AI-Green"];
    const FPS = 60;
    // Level configs (very easy -> hard)
    const LEVEL_CONFIGS = Array.from({length:LEVELS}, (_,i)=>({
      trackLength: 2000 + i*700, // get longer
      numObstacles: 6 + i*3,     // more obstacles
      aiSpeed: 3 + i*0.6,        // AI get faster
      playerMaxSpeed: 5 + i*0.5, // Player can go faster at high levels
      friction: 0.05 + i*0.01,   // Less friction at higher levels
    }));

    // Canvas and context
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const levelInfo = document.getElementById('levelInfo');
    // Controls
    let steer = 0; // -1...1
    let accelerating = false, braking = false;
    // Game state
    let curLevel = 0, levelStarted = false, levelFinished = false;
    let playerCar, aiCars, obstacles, cameraY, finishLineY;

    // UI overlays
    const startScreen = document.getElementById('startScreen');
    const startBtn = document.getElementById('startBtn');
    const levelComplete = document.getElementById('levelComplete');
    const nextBtn = document.getElementById('nextBtn');
    const levelMsg = document.getElementById('levelMsg');

    // Invisible controls (mobile)
    const leftControl = document.getElementById('leftControl');
    const rightControl = document.getElementById('rightControl');
    // Set up touch control listeners
    leftControl.style.height = rightControl.style.height = '100%';
    leftControl.style.width = rightControl.style.width = '50vw';
    leftControl.style.left = '0';
    rightControl.style.right = '0';

    // Touch controls for accelerator/brake
    leftControl.addEventListener('touchstart', e => { braking = true; e.preventDefault(); });
    leftControl.addEventListener('touchend', e => { braking = false; e.preventDefault(); });
    rightControl.addEventListener('touchstart', e => { accelerating = true; e.preventDefault(); });
    rightControl.addEventListener('touchend', e => { accelerating = false; e.preventDefault(); });

    // Device orientation (steering)
    window.addEventListener('deviceorientation', function(event) {
      // gamma: left/right tilt
      let gamma = event.gamma || 0;
      // Clamp gamma to -45 (left) to 45 (right)
      gamma = Math.max(-45, Math.min(45, gamma));
      steer = gamma / 35; // -1 ... 1
    });

    // Mouse controls (for desktop testing)
    document.addEventListener('keydown', function(e) {
      if(e.key === 'ArrowLeft') steer = -1;
      if(e.key === 'ArrowRight') steer = 1;
      if(e.key === 'ArrowUp') accelerating = true;
      if(e.key === 'ArrowDown') braking = true;
    });
    document.addEventListener('keyup', function(e) {
      if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') steer = 0;
      if(e.key === 'ArrowUp') accelerating = false;
      if(e.key === 'ArrowDown') braking = false;
    });

    // Start screen and level system
    startBtn.onclick = () => {
      startScreen.style.display = "none";
      curLevel = 0;
      startLevel(curLevel);
    };
    nextBtn.onclick = () => {
      levelComplete.style.display = "none";
      curLevel++;
      startLevel(curLevel);
    };

    function startLevel(levelIdx) {
      if(levelIdx >= LEVELS) {
        // Game complete
        startScreen.style.display = "";
        startScreen.innerHTML = "<div>Congratulations!<br>You finished all levels!</div><button id='startBtn'>Play Again</button>";
        document.getElementById('startBtn').onclick = () => location.reload();
        return;
      }
      let config = LEVEL_CONFIGS[levelIdx];
      playerCar = {
        x: canvas.width/2 - TRACK_WIDTH/4,
        y: config.trackLength - 200,
        vx: 0, vy: 0,
        color: PLAYER_COLORS[0],
        isPlayer: true,
        speed: 0,
        maxSpeed: config.playerMaxSpeed,
        angle: 0,
        finished: false,
        name: "You",
        place: 1
      };
      // 3 AI cars
      aiCars = [];
      for(let i=0;i<3;i++) {
        aiCars.push({
          x: canvas.width/2 + TRACK_WIDTH/4 * (i-1),
          y: config.trackLength - 260 - i*60,
          vx: 0, vy: 0,
          color: PLAYER_COLORS[i+1],
          isPlayer: false,
          speed: 0,
          maxSpeed: config.aiSpeed + Math.random()*0.8,
          angle: 0,
          finished: false,
          aiIdx: i,
          name: AI_NAMES[i],
          place: 1
        });
      }
      // Obstacles
      obstacles = [];
      for(let i=0;i<config.numObstacles;i++) {
        let lane = Math.floor(Math.random()*4);
        let ox = canvas.width/2 - TRACK_WIDTH/2 + (lane+0.5)*TRACK_WIDTH/4 - OBSTACLE_WIDTH/2;
        let oy = Math.random()*(config.trackLength-700);
        obstacles.push({
          x: ox,
          y: oy + 200,
          w: OBSTACLE_WIDTH,
          h: OBSTACLE_HEIGHT,
          color: ["#F44336","#FF9800","#FFEB3B","#4CAF50"][lane]
        });
      }
      finishLineY = 60;
      cameraY = playerCar.y - 350;
      levelStarted = true;
      levelFinished = false;
      updateLevelInfo();
      requestAnimationFrame(gameLoop);
    }

    function updateLevelInfo() {
      levelInfo.innerHTML = `Level ${curLevel+1} / ${LEVELS}`;
    }

    function gameLoop() {
      if(!levelStarted) return;
      update();
      draw();
      if(!levelFinished) requestAnimationFrame(gameLoop);
    }

    function update() {
      let config = LEVEL_CONFIGS[curLevel];
      // PLAYER update
      if(!playerCar.finished) {
        // Steer
        playerCar.x += steer * 6;
        // Accelerator/brake
        if(accelerating) playerCar.speed += 0.16;
        if(braking) playerCar.speed -= 0.23;
        // Friction
        playerCar.speed -= config.friction;
        playerCar.speed = Math.max(0, Math.min(playerCar.speed, playerCar.maxSpeed));
        // Move
        playerCar.y -= playerCar.speed;
        // Clamp to track
        playerCar.x = Math.max(canvas.width/2 - TRACK_WIDTH/2 + 4, Math.min(playerCar.x, canvas.width/2 + TRACK_WIDTH/2 - CAR_WIDTH - 4));
        // Collisions with obstacles
        for(let obs of obstacles) {
          if(collides(playerCar, obs)) {
            playerCar.speed *= 0.55;
            playerCar.y += 15;
          }
        }
        // Finish line
        if(playerCar.y < finishLineY && !playerCar.finished) {
          playerCar.finished = true;
        }
      }

      // AI update
      for(let ai of aiCars) {
        if(ai.finished) continue;
        // AI: aim for center of nearest open lane, avoid obstacles
        let laneCenters = [
          canvas.width/2 - TRACK_WIDTH/2 + TRACK_WIDTH/8 - CAR_WIDTH/2,
          canvas.width/2 - TRACK_WIDTH/2 + 3*TRACK_WIDTH/8 - CAR_WIDTH/2,
          canvas.width/2 - TRACK_WIDTH/2 + 5*TRACK_WIDTH/8 - CAR_WIDTH/2,
          canvas.width/2 - TRACK_WIDTH/2 + 7*TRACK_WIDTH/8 - CAR_WIDTH/2
        ];
        let myLane = Math.round((ai.x - (canvas.width/2 - TRACK_WIDTH/2)) / (TRACK_WIDTH/4));
        myLane = Math.max(0, Math.min(3, myLane));
        // Obstacle avoidance
        let nextObs = obstacles.find(o => Math.abs(o.x - ai.x) < 40 && o.y < ai.y && o.y > ai.y-120);
        let targetLane = myLane;
        if(nextObs) {
          // Try to switch lane
          if(myLane > 0 && !obstacles.some(o => Math.abs(o.x - laneCenters[myLane-1]) < 30 && Math.abs(o.y - ai.y) < 80))
            targetLane = myLane-1;
          else if(myLane < 3 && !obstacles.some(o => Math.abs(o.x - laneCenters[myLane+1]) < 30 && Math.abs(o.y - ai.y) < 80))
            targetLane = myLane+1;
        }
        ai.x += Math.sign(laneCenters[targetLane] - ai.x)*3.5;
        // Acceleration randomization
        if(Math.random()<0.9) ai.speed += 0.12 + Math.random()*0.05;
        if(nextObs) ai.speed -= 0.18;
        // Friction
        ai.speed -= config.friction*1.15;
        ai.speed = Math.max(0, Math.min(ai.speed, ai.maxSpeed));
        ai.y -= ai.speed;
        // Clamp track
        ai.x = Math.max(canvas.width/2 - TRACK_WIDTH/2 + 4, Math.min(ai.x, canvas.width/2 + TRACK_WIDTH/2 - CAR_WIDTH - 4));
        // Collisions with obstacles
        for(let obs of obstacles) {
          if(collides(ai, obs)) {
            ai.speed *= 0.6;
            ai.y += 11;
          }
        }
        // Finish line
        if(ai.y < finishLineY && !ai.finished) {
          ai.finished = true;
        }
      }

      // Place calculation
      let allCars = [playerCar, ...aiCars];
      allCars.sort((a,b) => a.y - b.y);
      allCars.forEach((car,idx) => car.place = idx+1);

      // Camera follows player
      cameraY = Math.max(0, Math.min(playerCar.y - 350, LEVEL_CONFIGS[curLevel].trackLength - canvas.height));
      // Level finish
      if(playerCar.finished && !levelFinished) {
        levelFinished = true;
        setTimeout(()=>{
          showLevelComplete();
        },700);
      }
    }

    function showLevelComplete() {
      levelComplete.style.display = "";
      let placeStr = playerCar.place === 1 ? "🥇 First Place!" : playerCar.place === 2 ? "🥈 Second Place" : playerCar.place === 3 ? "🥉 Third Place" : "4th Place";
      let nextMsg = (curLevel === LEVELS-1) ? "Finish" : "Next Level";
      levelMsg.innerHTML = `Level ${curLevel+1} Complete<br>${placeStr}`;
      nextBtn.textContent = nextMsg;
    }

    function collides(car, obs) {
      return (car.x < obs.x + obs.w && car.x + CAR_WIDTH > obs.x &&
              car.y < obs.y + obs.h && car.y + CAR_HEIGHT > obs.y);
    }

    function draw() {
      // Clear
      ctx.clearRect(0,0,canvas.width,canvas.height);

      // Draw track
      ctx.save();
      ctx.translate(0, -cameraY);
      // Track base
      ctx.fillStyle = "#222";
      ctx.fillRect(canvas.width/2 - TRACK_WIDTH/2 - TRACK_MARGIN, 0, TRACK_WIDTH + 2*TRACK_MARGIN, LEVEL_CONFIGS[curLevel].trackLength+300);
      // Road
      ctx.fillStyle = "#555";
      ctx.fillRect(canvas.width/2 - TRACK_WIDTH/2, 0, TRACK_WIDTH, LEVEL_CONFIGS[curLevel].trackLength+300);
      // Lane markers
      ctx.strokeStyle = "#fff";
      ctx.lineWidth = 2;
      for(let i=1;i<4;i++) {
        let x = canvas.width/2 - TRACK_WIDTH/2 + i*TRACK_WIDTH/4;
        ctx.setLineDash([30,25]);
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, LEVEL_CONFIGS[curLevel].trackLength+300);
        ctx.stroke();
      }
      ctx.setLineDash([]);

      // Draw obstacles
      for(let obs of obstacles) {
        ctx.fillStyle = obs.color;
        ctx.fillRect(obs.x, obs.y, obs.w, obs.h);
        ctx.strokeStyle = "#000";
        ctx.lineWidth = 2;
        ctx.strokeRect(obs.x, obs.y, obs.w, obs.h);
      }

      // Finish line
      ctx.fillStyle = "#fff";
      ctx.fillRect(canvas.width/2 - TRACK_WIDTH/2, finishLineY-10, TRACK_WIDTH, 15);
      for(let i=0;i<20;i++) {
        ctx.fillStyle = i%2 ? "#fff" : "#111";
        ctx.fillRect(canvas.width/2 - TRACK_WIDTH/2 + i*TRACK_WIDTH/20, finishLineY-10, TRACK_WIDTH/20, 15);
      }

      // Cars
      let allCars = [playerCar, ...aiCars];
      for(let car of allCars) {
        ctx.save();
        ctx.translate(car.x + CAR_WIDTH/2, car.y + CAR_HEIGHT/2);
        ctx.rotate(car.angle);
        ctx.fillStyle = car.color;
        ctx.fillRect(-CAR_WIDTH/2, -CAR_HEIGHT/2, CAR_WIDTH, CAR_HEIGHT);
        ctx.strokeStyle = "#222";
        ctx.lineWidth = 3;
        ctx.strokeRect(-CAR_WIDTH/2, -CAR_HEIGHT/2, CAR_WIDTH, CAR_HEIGHT);
        ctx.restore();
        // Name
        ctx.font = "bold 15px Arial";
        ctx.textAlign = "center";
        ctx.fillStyle = "#fff";
        ctx.fillText(car.isPlayer ? "You" : car.name, car.x + CAR_WIDTH/2, car.y + CAR_HEIGHT + 20);
        // Place
        if(car.finished) {
          ctx.font = "bold 12px Arial";
          ctx.fillStyle = "#FFD700";
          ctx.fillText(`${car.place}${car.place===1?'st':car.place===2?'nd':car.place===3?'rd':'th'}`, car.x+CAR_WIDTH/2, car.y+CAR_HEIGHT+35);
        }
      }

      ctx.restore();

      // HUD
      ctx.font = "bold 18px Arial";
      ctx.fillStyle = "#fff";
      ctx.textAlign = "left";
      ctx.fillText(`Speed: ${(playerCar.speed*18).toFixed(0)} km/h`, 12, 36);
      ctx.textAlign = "right";
      ctx.fillText(`Place: ${playerCar.place}/4`, canvas.width-12, 36);

      // Accelerator/Brake area hint (optional, can be commented out)
      // ctx.globalAlpha = 0.08;
      // ctx.fillStyle = "#0f0";
      // ctx.fillRect(canvas.width/2, 0, canvas.width/2, canvas.height);
      // ctx.fillStyle = "#f00";
      // ctx.fillRect(0, 0, canvas.width/2, canvas.height);
      // ctx.globalAlpha = 1;
    }
  </script>
</body>
  </html>
